<style>
    #phone-validation-message {
        display: block;
        color: {{ settings.checkout_error_color }};
    }
</style>


<script>
    (function($){
        $(document).on(`page:load page:change`, () => {

            if(Shopify.Checkout.step == 'contact_information'){

                let phoneNumberContainer = $(`[data-address-field="phone"]`)
                phoneNumberContainer.append(`<div id="phone-validation-message"></div>`)

                let phoneNumberInput = $(`[data-address-field="phone"] input`)
                phoneNumberInput.on('blur', ()=>{
                    phoneValidationHandler()
                })

                let formSubmitBtn = $(`[data-step="contact_information"] form [type="submit"]`)
                formSubmitBtn.on('click', (e) => {
                    e.preventDefault()
                    phoneValidationHandler(submitForm)
                })
            }
        });

        /** submit contact information form at Checkout */
        const submitForm = () => {
            let form = $(`[data-step="contact_information"] form`)
            form.submit()
        }

        /** handle the user interaction upon phone validation, with customizable callbacks passed in */
        const phoneValidationHandler = (callbackOnValidPhoneNumber, callbackOnInvalidPhoneNumber) => {
            let phoneNum = getPhoneNumberProcessed()
            if(isPhoneNumberValid(phoneNum)){
                updatePhoneValidationMessage('')
                callbackOnValidPhoneNumber ? callbackOnValidPhoneNumber() : null
            } else {
                updatePhoneValidationMessage('Sorry please correct your phone number in Singapore.')
                callbackOnInvalidPhoneNumber ? callbackOnInvalidPhoneNumber() : null
            }
        }

        /** return a pre-processed phone number without spaces */
        const getPhoneNumberProcessed = () => {
            let phoneNumberInput = $(`[data-address-field="phone"] input`)
            return phoneNumberInput.val().replace(/\s/g, '')
        }

        /** Return true if the phone number is valid for SG; otherwise false */
        const isPhoneNumberValid = (phoneNumber) => {
            let regex = new RegExp("^[6|8|9]\\d{7}$|^\\+65[6|8|9]\\d{7}$")
            return regex.test(phoneNumber)
        }

        /** update the status message of phone validation in front end */
        const updatePhoneValidationMessage = (message) => {
            let messageField = $("#phone-validation-message")
            messageField.html(`<span>${message}</span>`)
        }        
    })(Checkout.$)

</script>